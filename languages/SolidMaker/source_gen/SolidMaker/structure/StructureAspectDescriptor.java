package SolidMaker.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptScene = createDescriptorForScene();
  /*package*/ final ConceptDescriptor myConceptShape = createDescriptorForShape();
  /*package*/ final ConceptDescriptor myConceptSphere = createDescriptorForSphere();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptScene, myConceptShape, myConceptSphere);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Scene:
        return myConceptScene;
      case LanguageConceptSwitch.Shape:
        return myConceptShape;
      case LanguageConceptSwitch.Sphere:
        return myConceptSphere;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForScene() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SolidMaker", "Scene", 0xd267692584f34fa5L, 0xa7e9ebe8e59401a2L, 0x2da713e252aa6d00L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:39e50480-25ff-4820-b066-0a124a0da40d(SolidMaker.structure)/3289619915587874048");
    b.version(2);
    b.aggregate("shapes", 0x2da713e252aa6d03L).target(0xd267692584f34fa5L, 0xa7e9ebe8e59401a2L, 0x2da713e252aa6cf3L).optional(true).ordered(true).multiple(true).origin("3289619915587874051").done();
    b.alias("scene");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForShape() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SolidMaker", "Shape", 0xd267692584f34fa5L, 0xa7e9ebe8e59401a2L, 0x2da713e252aa6cf3L);
    b.class_(false, true, false);
    b.origin("r:39e50480-25ff-4820-b066-0a124a0da40d(SolidMaker.structure)/3289619915587874035");
    b.version(2);
    b.property("x", 0x2da713e252aa6cf4L).type(PrimitiveTypeId.INTEGER).origin("3289619915587874036").done();
    b.property("y", 0x2da713e252aa6cf6L).type(PrimitiveTypeId.INTEGER).origin("3289619915587874038").done();
    b.property("z", 0x2da713e252aa6cf9L).type(PrimitiveTypeId.INTEGER).origin("3289619915587874041").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSphere() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SolidMaker", "Sphere", 0xd267692584f34fa5L, 0xa7e9ebe8e59401a2L, 0x2da713e252aa6cfdL);
    b.class_(false, false, false);
    b.super_("SolidMaker.structure.Shape", 0xd267692584f34fa5L, 0xa7e9ebe8e59401a2L, 0x2da713e252aa6cf3L);
    b.origin("r:39e50480-25ff-4820-b066-0a124a0da40d(SolidMaker.structure)/3289619915587874045");
    b.version(2);
    b.property("radius", 0x2da713e252aa6cfeL).type(PrimitiveTypeId.INTEGER).origin("3289619915587874046").done();
    b.alias("sphere");
    return b.create();
  }
}
